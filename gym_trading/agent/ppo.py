import torchimport torch.nn as nnimport torch.nn.functional as Ffrom torch.distributions import MultivariateNormaldevice = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")# FLAIR PPOclass Memory:    def __init__(self):        self.actions = []        self.states = []        self.logprobs = []        self.rewards = []        def clear_memory(self):        del self.actions[:]        del self.states[:]        del self.logprobs[:]        del self.rewards[:]class ActorCritic(nn.Module):    def __init__(self, state_dim, action_dim, action_std, initialization=False):        super(ActorCritic, self).__init__()        self.actor =  nn.Sequential(                nn.Linear(state_dim, 256),                nn.Tanh(),                nn.Linear(256, action_dim * 2),                )        # critic        self.critic = nn.Sequential(                nn.Linear(state_dim, 256),                nn.Tanh(),                nn.Linear(256, 1),                )        self.action_dim = action_dim        self.state_dim = state_dim        self.init_var = torch.full((action_dim,), action_std*action_std).to(device)    def forward(self):        raise NotImplementedError    def act(self, state, memory):        if state.sum() < 0:            action_mean = torch.zeros(state.shape[0], self.action_dim).to(device)            cov_mat = torch.diag(self.init_var)        else:            action_mean, action_var = torch.split(self.actor(state), self.action_dim, dim=-1)            cov_mat = torch.diag_embed(F.softplus(action_var))        dist = MultivariateNormal(action_mean, cov_mat)        action = dist.sample()        action_logprob = dist.log_prob(action)        memory.states.append(state)        memory.actions.append(action)        memory.logprobs.append(action_logprob)        return action.detach()    def evaluate(self, state, action):                 action_mean, action_var = torch.split(self.actor(state), self.action_dim, dim=-1)        action_var = F.softplus(action_var)                    # NO GRADIENT FOR THE INITIAL STATE        action_mean = torch.where(state.sum((1,2),keepdim=True) < 0, torch.zeros_like(action_mean), action_mean)        action_var = torch.where(state.sum((1,2),keepdim=True) < 0, torch.ones_like(action_var) * 0.5, action_var)                cov_mat = torch.diag_embed(action_var).to(device)        dist = MultivariateNormal(action_mean, cov_mat)        action_logprobs = dist.log_prob(action)        dist_entropy = dist.entropy()        state_value = self.critic(state)        state_value = torch.where(state.sum((1,2),keepdim=True) < 0, torch.zeros_like(state_value), state_value)        return action_logprobs, torch.squeeze(state_value), dist_entropyclass PPO:    def __init__(self, state_dim, action_dim, action_std, lr, betas, gamma, K_epochs, eps_clip):        self.lr = lr        self.betas = betas        self.gamma = gamma        self.eps_clip = eps_clip        self.K_epochs = K_epochs        self.policy = ActorCritic(state_dim, action_dim, action_std).to(device)        self.optimizer = torch.optim.Adam(self.policy.parameters(), lr=lr, betas=betas)        self.policy_old = ActorCritic(state_dim, action_dim, action_std).to(device)        self.policy_old.load_state_dict(self.policy.state_dict())                self.MseLoss = nn.MSELoss()    def select_action(self, state, memory):        state = torch.FloatTensor(state.reshape(1, -1)).to(device)        return self.policy_old.act(state, memory).cpu().data.numpy().flatten()    def update(self, memory):        # Monte Carlo estimate of rewards:        rewards = []        discounted_reward = 0        for reward in reversed(memory.rewards):            discounted_reward = reward + (self.gamma * discounted_reward)            rewards.insert(0, discounted_reward)        # Normalizing the rewards:        rewards = torch.stack(rewards).squeeze(-1)        rewards = (rewards - rewards.mean()) / (rewards.std() + 1e-5)        # convert list to tensor        old_states = torch.stack(memory.states).detach()        old_actions = torch.stack(memory.actions).detach()        old_logprobs = torch.stack(memory.logprobs).detach()                # Optimize policy for K epochs:        for _ in range(self.K_epochs):            # Evaluating old actions and values :            logprobs, state_values, dist_entropy = self.policy.evaluate(old_states, old_actions)            # Finding the ratio (pi_theta / pi_theta__old):            ratios = torch.exp(logprobs - old_logprobs.detach())            # Finding Surrogate Loss:            advantages = rewards - state_values.detach()               surr1 = ratios * advantages            surr2 = torch.clamp(ratios, 1-self.eps_clip, 1+self.eps_clip) * advantages            loss = -torch.min(surr1, surr2) + 0.5*self.MseLoss(state_values, rewards) - 0.01*dist_entropy            # take gradient step            self.optimizer.zero_grad()            loss.mean().backward()            self.optimizer.step()        # Copy new weights into old policy:        self.policy_old.load_state_dict(self.policy.state_dict())