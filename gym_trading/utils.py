import numpy as npdef get_price_list(flow):    price_list = []    column_index = [i*2 for i in range(0,flow.shape[1]//2)]    for i in range(flow.shape[0]):        price_list.extend(flow.iloc[i,column_index].to_list())    price_set = set(price_list)    price_list = sorted(list(price_set), reverse = True)    return price_listdef get_adjusted_obs(stream, price_list):    result = [0 for _ in range(len(price_list))]    for i in range(len(price_list)):        for j in range(stream.shape[0]//2):            if price_list[i] == stream.iloc[j*2]:                result[i] = stream.iloc[j*2+1]    return result def get_max_quantity(flow):    price_list = []    column_index = [i*2 + 1 for i in range(0,flow.shape[1]//2)]    for i in range(flow.shape[0]):        price_list.extend(flow.iloc[i,column_index].to_list())    price_set = max(price_list)    return price_setdef get_quantity_from_stream(stream):    column_index = [i*2 + 1 for i in range(0,stream.shape[0]//2)]    return stream.iloc[column_index].to_list()def get_price_from_stream(stream):    column_index = [i*2 for i in range(0,stream.shape[0]//2)]    return stream.iloc[column_index].to_list()def from_pairs2lst_pairs(pairs):    lst = [[],[]]    for pair in pairs:        lst[0].append(pair[0])        lst[1].append(pair[1])    return lstdef from_series2obs(series):    price_level = 10    min_price = 31120200 # TODO refered from BaseEnv    dictionary = {        'price':np.array([min_price for _ in range(price_level)]).astype(np.int32),        'quantity':np.array([0 for _ in range(price_level)]).astype(np.int32)        }    for i in range(min(len(series)//2, price_level)):        # as prices could be 11 or 12 which is more than current price level        dictionary['price'][i] = series.iloc[2*i]        dictionary['quantity'][i] = series.iloc[2*i+1]        # print("series.iloc[2*i+1] : ",series.iloc[2*i+1])    return dictionary    if __name__=="__main__":    pairs = [[123,1],[133324,1],[132312,3]]##    # series = observation[0]            